Testname

A:  Testing CE and Dual only
   - Dual weight matrix -
   Wx = np.zeros([n_st,n_st])
   Wx[0,3] = -1
   Wx[3,0] = -1

   Jd = 0.5*mtimes((uk).T,mtimes(Wu,(uk))) - xk[0]*xk[3]*K0[j*n_st:(j+1)*n_st,:][0,0]*K0[j*n_st:(j+1)*n_st,:][0,3] + mtimes(p0.T,xk) + 0.5*trace(mtimes(Wg[j*(n_st+n_par):(j+1)*(n_st+n_par),:],Sigmak)+mtimes((Sigmak_p - Sigmak),Kg[j*(n_st+n_par):(j+1)*(n_st+n_par),:]))


B: Testing CE and Dual only
   - Dual weight matrix -
   Wx = np.zeros([n_st,n_st])
   Wx[0,3] = -1
   Wx[3,0] = -1
            
  Jd = 0.5*mtimes((uk).T,mtimes(Wu,(uk))) +0.5*mtimes((xk).T,mtimes(K0[j*n_st:(j+1)*n_st,:],(xk))) + mtimes(p0.T,xk) + 0.5*trace(mtimes(Wg[j*(n_st+n_par):(j+1)*(n_st+n_par),:],Sigmak)+mtimes((Sigmak_p - Sigmak),Kg[j*(n_st+n_par):(j+1)*(n_st+n_par),:]))


C: added gradient and hessian of cost function, letting p0= cost_f

D: reduce weight of objective on k:N-1 to *.1


E: reformulate H0 and all jacobians/hessians to be evaluated symbolically

F: D reduced to *0

G: revert E, keep F

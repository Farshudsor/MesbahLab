A:
    R'R*1000         R[i] = xk[i]>xk_ub[i] + xk[i]<xk_lb[i]

B:
    R'R*1E6           R[i] = xk[i]>xk_ub[i] + xk[i]<xk_lb[i]

C:
    Wx for k:N-1 *.01

D:
    revert C, R'R*1E10

E:
    #Soft Constraint Penalty
    Rk = SX.zeros(n_st,n_st)
    for i in range(n_st):
         Rk[i,i] = xk[i]>xk_ub[i] + xk[i]<xk_lb[i]

    viol_pen = 1E6
    viol_dev_u = (xk-xk_ub)
    viol_dev_l = (xk_lb-xk)
    #import pdb; pdb.set_trace()
    violation_cost = viol_pen*( mtimes(viol_dev_u.T,mtimes(Rk,viol_dev_u)) + mtimes(viol_dev_u.T,mtimes(Rk,viol_dev_u)))

F: ***
    #Soft Constraint Penalty
    Rk = SX.zeros(n_st,n_st)
    for j in range(n_st):
         Rk[j,j] = (xk[j]>xk_ub[j]) + (xk[j]<xk_lb[j])

    viol_pen = 1E6
    viol_dev_u = (xk-xk_ub)
    viol_dev_l = (xk_lb-xk)
    #import pdb; pdb.set_trace()
    violation_cost = viol_pen*( mtimes(viol_dev_u.T,mtimes(Rk,viol_dev_u)) + mtimes(viol_dev_u.T,mtimes(Rk,viol_dev_u)))

G:
    F with   Wx for k:N-1 *.1

H:
    F with  viol_pen = 10

J:
    F with viol_pen = 1

K:
    H with tube tightened bounds

L:
    with Rk = Ru, Rl, 
